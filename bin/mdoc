#!/usr/bin/env python

from __future__ import print_function
from pathlib import Path
import argparse
import json
from mdoc import *

def get_files():
    parser = argparse.ArgumentParser()
    # Command line arguments
    parser.add_argument('--input', '-i', required=True, help='Input file')
    output_group = parser.add_mutually_exclusive_group(required=True)
    output_group.add_argument('--output', '-o', help='Output file')
    output_group.add_argument('--dryrun', '-d', action='store_true', help='Print output to the screen only')
    output_group.add_argument('--showvariables', '-s', action='store_true', help='Print out only which variables are referenced')
    parser.add_argument('--variables', '-v', help='JSON file containing variable definitions')
    args = parser.parse_args()
    # Get input file name
    input_file = Path(args.input)
    # Get output file name
    if args.output:
        output_file = Path(args.output)
    elif args.dryrun:
        output_file = -1
    elif args.showvariables:
        output_file = -2
    if args.variables:
        with open(args.variables, 'r') as f:
            variables = json.load(f)
    else:
        variables = {}
    return input_file, output_file, variables

if __name__ == '__main__':
    input_file, output_file, variables = get_files()
    if output_file == -2:
        showvariables = True
    else:
        showvariables = False
    mdoc = MDoc(input_path=input_file, variables=variables, showvariables=showvariables)
    if output_file is -1 or output_file == -2:
        print(mdoc.parsed)
    else:
        with open(output_file, 'w') as f:
            f.write(mdoc.parsed)
