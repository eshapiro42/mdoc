## mdoc tags

mdoc accomplishes all of this by parsing your input files for mdoc tags. These tags look like:

1. ```{mdoc include file.ext}``` <-- to include the file ```file.ext```
2. ```{mdoc include tag eq1 from file.ext}``` <-- to include the snippet called ```eq1``` from the file ```file.ext```
3. ```{mdoc var1}``` <-- to insert the variable called ```var1```

You might be wondering how, if this readme is generated using mdoc, I was able to type {mdoc ...} above without it being parsed. This is thanks to the ```static``` option, which prevents included files from being parsed and includes them verbatim:

* ```{mdoc include file.ext static}``` <-- includes ```file.ext``` but does not parse it for mdoc tags
* ```{mdoc include tag eq1 from file.ext static}``` <-- includes snippet ```eq1``` from ```file.ext``` but does not parse it for mdoc tags

There is no static option for variables, since that wouldn't make any sense.

Snippets are defined as follows:

```
{mdoc tag snippet_name}
...
snippet contents
...
{mdoc untag snippet_name}
```

You can then reference the snippet name and the file it lives in to include it in another document. This is very handy for including snippets of code that may change over time, as well as other fluctuating content.
