## mdoc tags

mdoc accomplishes all of this by parsing your input files for mdoc tags. These tags look like:

1. ```{mdoc include file.ext}```, to include the file ```file.ext```
2. ```{mdoc snippet eq1 from file.ext}```, to include the snippet called ```eq1``` from the file ```file.ext```
3. ```{mdoc var1}```, to insert the variable called ```var1```
4. ```{mdoc eval expression}```, to evaluate the Python expression ```expression```

You might be wondering how, if this readme is generated using mdoc, I was able to type {mdoc ...} above without it being parsed. This is thanks to the ```static``` option, which prevents included files from being parsed and includes them verbatim:

1. ```{mdoc include file.ext static}``` includes ```file.ext``` but does not parse it for mdoc tags
2. ```{mdoc include snippet eq1 from file.ext static}``` includes snippet ```eq1``` from ```file.ext``` but does not parse it for mdoc tags

There is no static option for variables or evals, since that wouldn't make any sense.

Snippets are defined as follows:

```
# Inside file.ext
{mdoc snip snippet_name}
...
snippet contents
...
{mdoc unsnip snippet_name}
```

You can then reference the snippet name and the file it lives in to include it in another document:

```
# Inside main file
{mdoc snippet snippet_name from file.ext}
```

This is very handy for including snippets of code that may change over time, as well as other fluctuating content.

Of course, the words ```include```, ```snippet```, ```snip```, ```unsnip``` and ```eval``` are reserved and cannot be used as mdoc variables names.
